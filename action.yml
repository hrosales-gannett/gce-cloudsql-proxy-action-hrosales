name: "Google Cloud SQL Proxy"
description: "Start Google CloudSQL Proxy"

branding:
  icon: "database"
  color: "red"

inputs:
  creds:
    description: "Contents of a Service Account JSON Key"
    required: true
  instance:
    description: "CloudSQL instance"
    required: true
  port:
    description: "Listen on port"
    required: false
    default: 5432
  proxy_version:
    description: "CloudSQL Proxy Version"
    required: false
    default: 1.21.0

runs:
  using: "composite"
  steps:
    - name: Set GCP Credentials Path
      shell: bash
      run: |
        export PROXY_PATH="$GITHUB_WORKSPACE/gce-cloudsql-proxy"
        echo "PROXY_PATH=$PROXY_PATH" >> $GITHUB_ENV

    - name: Start Google Cloud SQL Proxy
      shell: bash
      run: |
        # Define the new credentials path
        PROXY_PATH="$GITHUB_WORKSPACE/gce-cloudsql-proxy"

        # Ensure directory exists with correct permissions
        mkdir -p $PROXY_PATH
        chmod 755 $PROXY_PATH  # Ensure directory is readable

        # Write the Google Cloud credentials to a JSON file
        echo '${{ inputs.creds }}' > $PROXY_PATH/key.json
        chmod 644 $PROXY_PATH/key.json  # Ensure file is readable

        # Debugging: Check file ownership and permissions
        ls -lah $PROXY_PATH
        stat $PROXY_PATH/key.json

        # Start the Cloud SQL Proxy container with user permissions
        docker run -d --net host --name gce-cloudsql-proxy --restart on-failure \
        --user $(id -u):$(id -g) \  # Run as the same user as the host
        -v $PROXY_PATH:/cloudsql-creds \
        gcr.io/cloudsql-docker/gce-proxy:${{ inputs.proxy_version }} \
        /cloud_sql_proxy \
          -credential_file /cloudsql-creds/key.json \
          -dir /cloudsql-creds \
          -instances=${{ inputs.instance }}=tcp:127.0.0.1:${{ inputs.port }}

        # Wait until connections are accepted
        sleep 3
        isready=0
        for i in {1..10}; do
          echo "Wait for connections to be ready ... $i/10"
          (${{ github.action_path }}/wait-for-it.sh --quiet --timeout=3 --host=127.0.0.1 --port=${{ inputs.port }} || exit $?) && true # escape bash's pipefail
          isready=$?
          if [[ $isready -eq 0 ]]; then
            break
          fi
          sleep 2
        done

        # Print container logs for debugging
        docker logs gce-cloudsql-proxy

        # Exit with error code if we couldn't connect
        if [[ $isready -ne 0 ]]; then
          exit $isready 
        fi